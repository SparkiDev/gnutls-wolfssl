diff --git a/devel/symbols.last b/devel/symbols.last
index d4c1b1a..47c1a76 100644
--- a/devel/symbols.last
+++ b/devel/symbols.last
@@ -612,6 +612,7 @@ gnutls_pkcs_schema_get_name@GNUTLS_3_4
 gnutls_pkcs_schema_get_oid@GNUTLS_3_4
 gnutls_prf@GNUTLS_3_4
 gnutls_prf_early@GNUTLS_3_6_8
+gnutls_prf_gen@GNUTLS_3_8.4
 gnutls_prf_hash_get@GNUTLS_3_6_13
 gnutls_prf_raw@GNUTLS_3_4
 gnutls_prf_rfc5705@GNUTLS_3_4
diff --git a/lib/abstract_int.h b/lib/abstract_int.h
index 88d4cb4..82c8f66 100644
--- a/lib/abstract_int.h
+++ b/lib/abstract_int.h
@@ -30,6 +30,15 @@ typedef int (*gnutls_privkey_pk_params_func)(gnutls_privkey_t key,
 					     gnutls_pk_params_st *params);
 
 struct gnutls_privkey_st {
+    gnutls_pk_generate_func generate_backend;
+    gnutls_pk_import_privkey_x509_func import_privkey_x509_backend;
+    gnutls_pk_import_privkey_url_func import_privkey_url_backend;
+    gnutls_pk_privkey_decrypt_func privkey_decrypt_backend;
+    gnutls_pk_derive_shared_secret_func derive_shared_secret_backend;
+    gnutls_pk_sign_func sign_backend;
+    gnutls_pk_sign_hash_func sign_hash_backend;
+    gnutls_pk_deinit_func deinit_backend;
+    void *pk_ctx;
 	gnutls_privkey_type_t type;
 	gnutls_pk_algorithm_t pk_algorithm;
 
@@ -57,6 +66,18 @@ struct gnutls_privkey_st {
 };
 
 struct gnutls_pubkey_st {
+    gnutls_pk_generate_func generate_backend;
+    gnutls_pk_export_pubkey_func export_pubkey_backend;
+    gnutls_pk_import_pubkey_url_func import_pubkey_url_backend;
+    gnutls_pk_import_pubkey_x509_func import_pubkey_x509_backend;
+    gnutls_pk_pubkey_encrypt_func pubkey_encrypt_backend;
+    gnutls_pk_derive_shared_secret_func derive_shared_secret_backend;
+    gnutls_pk_verify_func verify_backend;
+    gnutls_pk_verify_hash_func verify_hash_backend;
+    gnutls_pk_deinit_func deinit_backend;
+    void *pk_ctx;
+	gnutls_privkey_type_t type;
+	gnutls_pk_algorithm_t pk_algorithm;
 	unsigned int bits; /* an indication of the security parameter */
 
 	/* the size of params depends on the public
diff --git a/lib/crypto-backend.c b/lib/crypto-backend.c
index 63db24b..413eeb3 100644
--- a/lib/crypto-backend.c
+++ b/lib/crypto-backend.c
@@ -23,10 +23,10 @@
 #include "errors.h"
 #include "gnutls_int.h"
 #include <gnutls/crypto.h>
+#include <dlfcn.h>
 #include "crypto-backend.h"
 #include "crypto.h"
 #include "mpi.h"
-#include "pk.h"
 #include "random.h"
 #include "cipher_int.h"
 
@@ -34,6 +34,7 @@
 int crypto_mac_prio = INT_MAX;
 int crypto_digest_prio = INT_MAX;
 int crypto_cipher_prio = INT_MAX;
+int crypto_pk_prio = INT_MAX;
 
 typedef struct algo_list {
 	int algorithm;
@@ -187,6 +188,8 @@ _gnutls_get_crypto_cipher(gnutls_cipher_algorithm_t algo)
 	return _get_algo(&glob_cl, algo);
 }
 
+
+
 /**
  * gnutls_crypto_register_cipher:
  * @algorithm: is the gnutls algorithm identifier
@@ -324,6 +327,40 @@ int gnutls_crypto_rnd_register(int priority, const gnutls_crypto_rnd_st *s)
 	return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
 }
 
+extern int crypto_prf_prio;
+extern gnutls_crypto_prf_st* _gnutls_prf_ops;
+
+/*-
+ * gnutls_crypto_prf_register:
+ * @priority: is the priority of the generator
+ * @s: is a structure holding new generator's data
+ *
+ * This function will register a random generator to be used by
+ * gnutls.  Any generator registered will override the included
+ * generator and by convention kernel implemented generators have
+ * priority of 90 and CPU-assisted of 80. The generator with the lowest priority will be
+ * used by gnutls.
+ *
+ * This function should be called before gnutls_global_init().
+ *
+ * For simplicity you can use the convenience
+ * gnutls_crypto_prf_register() macro.
+ *
+ * Returns: %GNUTLS_E_SUCCESS on success, otherwise a negative error code.
+ *
+ * Since: 2.6.0
+ -*/
+int gnutls_crypto_prf_register(int priority, const gnutls_crypto_prf_st *s)
+{
+	if (crypto_prf_prio >= priority) {
+		memcpy(&_gnutls_prf_ops, s, sizeof(*s));
+		crypto_prf_prio = priority;
+		return 0;
+	}
+
+	return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+}
+
 /*-
  * gnutls_crypto_single_mac_register:
  * @algorithm: is the gnutls algorithm identifier
@@ -463,3 +500,58 @@ int gnutls_crypto_register_digest(gnutls_digest_algorithm_t algorithm,
 		"called the deprecated gnutls_crypto_register_digest()\n");
 	return 0;
 }
+
+int gnutls_load_crypto_provider(const char *provider_path)
+{
+    void *handle;
+
+    if (provider_path == NULL) {
+        fprintf(stderr, "Error: Provider path must be specified\n");
+        return -1;
+    }
+
+    fprintf(stderr, "Loading crypto provider from: %s\n", provider_path);
+
+    handle = dlopen(provider_path, RTLD_NOW);
+    if (handle == NULL) {
+        fprintf(stderr, "Failed to load provider: %s\n", dlerror());
+        return -1;
+    }
+
+    {
+        typedef gnutls_crypto_rnd_st*(*rnd_ops_func)(void);
+        rnd_ops_func func = (rnd_ops_func)dlsym(handle, "gnutls_get_rnd_ops");
+        if (func != NULL) {
+            gnutls_crypto_rnd_register(80, func());
+        }
+    }
+
+    {
+        typedef gnutls_crypto_prf_st*(*prf_ops_func)(void);
+        prf_ops_func func = (prf_ops_func)dlsym(handle, "gnutls_get_prf_ops");
+        if (func != NULL) {
+            gnutls_crypto_prf_register(80, func());
+        }
+    }
+
+    fprintf(stderr, "Successfully loaded crypto provider\n");
+    return 0;
+}
+
+static algo_list glob_pk = { GNUTLS_PK_UNKNOWN, 0, NULL, 0, NULL };
+
+/* Registration function for public key algorithms */
+int gnutls_crypto_single_pk_register(gnutls_pk_algorithm_t algorithm,
+                                    int priority,
+                                    const gnutls_crypto_pk_st *s,
+                                    int free_s)
+{
+    return _algo_register(&glob_pk, algorithm, priority, (void *)s, free_s);
+}
+
+/* Retrieval function for public key algorithms */
+const gnutls_crypto_pk_st *
+_gnutls_get_crypto_pk(gnutls_pk_algorithm_t algo)
+{
+    return _get_algo(&glob_pk, algo);
+}
diff --git a/lib/crypto-backend.h b/lib/crypto-backend.h
index f213a43..82a5581 100644
--- a/lib/crypto-backend.h
+++ b/lib/crypto-backend.h
@@ -23,8 +23,11 @@
 #ifndef GNUTLS_LIB_CRYPTO_BACKEND_H
 #define GNUTLS_LIB_CRYPTO_BACKEND_H
 
+
 #include <gnutls/crypto.h>
 
+#define MAX_PVP_SEED_SIZE 256
+
 #define gnutls_crypto_single_cipher_st gnutls_crypto_cipher_st
 #define gnutls_crypto_single_mac_st gnutls_crypto_mac_st
 #define gnutls_crypto_single_digest_st gnutls_crypto_digest_st
@@ -75,6 +78,7 @@ typedef struct {
 	int (*exists)(gnutls_digest_algorithm_t);
 } gnutls_crypto_digest_st;
 
+
 typedef struct {
 	int (*hkdf_extract)(gnutls_mac_algorithm_t, const void *key,
 			    size_t keysize, const void *salt, size_t saltsize,
@@ -95,6 +99,13 @@ typedef struct gnutls_crypto_rnd {
 	int (*self_test)(void); /* this should not require rng initialization */
 } gnutls_crypto_rnd_st;
 
+typedef struct gnutls_crypto_prf {
+        int (*raw)(gnutls_mac_algorithm_t mac, size_t master_size,
+		   const void *master, size_t label_size, const char *label,
+		   size_t seed_size, const uint8_t *seed, size_t outsize,
+		   char *out);
+} gnutls_crypto_prf_st;
+
 typedef void *bigint_t;
 
 /**
@@ -374,6 +385,22 @@ typedef enum {
 
 /* Public key algorithms */
 typedef struct gnutls_crypto_pk {
+    gnutls_pk_generate_func generate_backend;
+    gnutls_pk_export_pubkey_func export_pubkey_backend;
+    gnutls_pk_import_privkey_x509_func import_privkey_x509_backend;
+    gnutls_pk_pubkey_encrypt_func pubkey_encrypt_backend;
+    gnutls_pk_privkey_decrypt_func privkey_decrypt_backend;
+    gnutls_pk_import_pubkey_x509_func import_pubkey_x509_backend;
+    gnutls_pk_import_privkey_url_func import_privkey_url_backend;
+    gnutls_pk_import_pubkey_url_func import_pubkey_url_backend;
+    gnutls_pk_sign_func sign_backend;
+    gnutls_pk_verify_func verify_backend;
+    gnutls_pk_sign_hash_func sign_hash_backend;
+    gnutls_pk_verify_hash_func verify_hash_backend;
+    gnutls_pk_derive_shared_secret_func derive_shared_secret_backend;
+	gnutls_pk_copy_func copy_backend;
+    gnutls_pk_deinit_func deinit_backend;
+    void *pk_ctx;
 	/* The params structure should contain the private or public key
 	 * parameters, depending on the operation */
 	int (*encrypt)(gnutls_pk_algorithm_t, gnutls_datum_t *ciphertext,
@@ -438,7 +465,13 @@ int gnutls_crypto_single_digest_register(
 	gnutls_digest_algorithm_t algorithm, int priority,
 	const gnutls_crypto_single_digest_st *s, int free_s);
 
+int gnutls_crypto_single_pk_register(gnutls_pk_algorithm_t algorithm,
+                                    int priority,
+                                    const gnutls_crypto_pk_st *s,
+                                    int free_s);
+
 int gnutls_crypto_rnd_register(int priority, const gnutls_crypto_rnd_st *s);
+int gnutls_crypto_prf_register(int priority, const gnutls_crypto_prf_st *s);
 int gnutls_crypto_pk_register(int priority, const gnutls_crypto_pk_st *s);
 int gnutls_crypto_bigint_register(int priority,
 				  const gnutls_crypto_bigint_st *s);
@@ -467,4 +500,6 @@ int _gnutls_rsa_pss_sign_pad(gnutls_x509_spki_st *params, size_t key_bits,
 			     const gnutls_datum_t *data, unsigned char *buffer,
 			     size_t buffer_size);
 
+int gnutls_load_crypto_provider(const char *provider_path);
+
 #endif /* GNUTLS_LIB_CRYPTO_BACKEND_H */
diff --git a/lib/crypto.h b/lib/crypto.h
index 9403560..f52f50a 100644
--- a/lib/crypto.h
+++ b/lib/crypto.h
@@ -23,6 +23,7 @@
 #ifndef GNUTLS_LIB_CRYPTO_H
 #define GNUTLS_LIB_CRYPTO_H
 
+#include <gnutls/gnutls.h>
 const gnutls_crypto_cipher_st *
 _gnutls_get_crypto_cipher(gnutls_cipher_algorithm_t algo);
 const gnutls_crypto_digest_st *
@@ -36,5 +37,6 @@ int _gnutls_crypto_register_cipher(gnutls_cipher_algorithm_t algorithm,
 				   gnutls_cipher_encrypt_func encrypt,
 				   gnutls_cipher_decrypt_func decrypt,
 				   gnutls_cipher_deinit_func deinit);
+const gnutls_crypto_pk_st *_gnutls_get_crypto_pk(gnutls_pk_algorithm_t algo);
 
 #endif /* GNUTLS_LIB_CRYPTO_H */
diff --git a/lib/global.c b/lib/global.c
index 9aa95dd..ba1e736 100644
--- a/lib/global.c
+++ b/lib/global.c
@@ -22,6 +22,9 @@
  */
 
 #include "gnutls_int.h"
+#include <stdlib.h>
+#include <stdint.h>
+#include "crypto-backend.h"
 #include "errors.h"
 #include <libtasn1.h>
 #include "dh.h"
@@ -368,6 +371,20 @@ static int _gnutls_global_init(unsigned constructor)
 	_gnutls_register_accel_crypto();
 	_gnutls_cryptodev_init();
 	_gnutls_afalg_init();
+
+    /* we check if PROVIDER_PATH was set, if not, we set the default value */
+    const char *path_value = getenv("PROVIDER_PATH");
+    if (path_value == NULL) {
+        _gnutls_debug_log("PROVIDER_PATH was not set, setting to default value: /opt/wolfssl-gnutls-wrapper/lib/");
+        path_value = "/opt/wolfssl-gnutls-wrapper/lib/libgnutls-wolfssl-wrapper.so";
+    }
+
+    if (gnutls_load_crypto_provider(path_value) != 0) {
+        gnutls_assert();
+        goto out;
+    }
+
+
 #ifdef HAVE_LEANCRYPTO
 	lc_init(0);
 #endif
diff --git a/lib/hash_int.c b/lib/hash_int.c
index 3cf34e5..ecaa4e5 100644
--- a/lib/hash_int.c
+++ b/lib/hash_int.c
@@ -174,10 +174,11 @@ int _gnutls_mac_fast(gnutls_mac_algorithm_t algorithm, const void *key,
 	 */
 	cc = _gnutls_get_crypto_mac(algorithm);
 	if (cc != NULL) {
-		if (cc->fast(algorithm, NULL, 0, key, keylen, text, textlen,
-			     digest) < 0) {
+                ret = cc->fast(algorithm, NULL, 0, key, keylen, text, textlen,
+			       digest);
+		if (ret < 0) {
 			gnutls_assert();
-			return GNUTLS_E_HASH_FAILED;
+			return ret;
 		}
 
 		return 0;
diff --git a/lib/includes/gnutls/crypto.h b/lib/includes/gnutls/crypto.h
index 400072d..c36c5db 100644
--- a/lib/includes/gnutls/crypto.h
+++ b/lib/includes/gnutls/crypto.h
@@ -191,7 +191,7 @@ int gnutls_rnd(gnutls_rnd_level_t level, void *data, size_t len);
 
 void gnutls_rnd_refresh(void);
 
-/* API to override ciphers and MAC algorithms 
+/* API to override ciphers and MAC algorithms
  */
 
 typedef int (*gnutls_cipher_init_func)(gnutls_cipher_algorithm_t, void **ctx,
@@ -261,6 +261,41 @@ int gnutls_crypto_register_mac(
 	gnutls_mac_deinit_func deinit,
 	gnutls_mac_fast_func hash_fast) _GNUTLS_GCC_ATTR_DEPRECATED;
 
+typedef int (*gnutls_pk_generate_func)(void **ctx, const void *privkey,
+                                          gnutls_pk_algorithm_t algo,
+                                          unsigned int bits);
+
+typedef int (*gnutls_pk_export_pubkey_func)(void **pub_key_ctx, void *priv_key_ctx, const void* pubkey);
+typedef int (*gnutls_pk_import_privkey_x509_func)(void **ctx, const void *privkey,
+        const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format);
+typedef int (*gnutls_pk_import_pubkey_x509_func)(void **ctx, const void *pubkey,
+        gnutls_datum_t * data, unsigned int flags);
+typedef int (*gnutls_pk_pubkey_encrypt_func)(void *ctx, gnutls_pubkey_t key, const gnutls_datum_t * plaintext, gnutls_datum_t * ciphertext);
+typedef int (*gnutls_pk_privkey_decrypt_func)(void *ctx, gnutls_privkey_t key, const gnutls_datum_t * ciphertext, gnutls_datum_t * plaintext);
+typedef int (*gnutls_pk_import_privkey_url_func)(void **ctx, const void *privkey, const char *url);
+typedef int (*gnutls_pk_import_pubkey_url_func)(void **ctx, const void *pubkey, const char *url);
+typedef int (*gnutls_pk_sign_func)(void *ctx,
+                                   const void *privkey,
+                                   gnutls_digest_algorithm_t hash,
+                                   const void *data,
+                                   const void *signature);
+typedef int (*gnutls_pk_sign_hash_func)(void *ctx, const void *privkey,
+                                      gnutls_digest_algorithm_t hash_algo,
+                                      const gnutls_datum_t *hash_data,
+                                      gnutls_datum_t *signature);
+typedef int (*gnutls_pk_verify_hash_func)(void *ctx, const void *pubkey,
+                                        gnutls_sign_algorithm_t algo,
+                                        const gnutls_datum_t *hash,
+                                        const gnutls_datum_t *signature);
+typedef int (*gnutls_pk_verify_func)(void *ctx,
+                                     const void *pubkey,
+                                     gnutls_sign_algorithm_t hash,
+                                     const void *data,
+                                     const void *signature);
+typedef int (*gnutls_pk_derive_shared_secret_func)(void *ctx, const void *privkey, const void *pubkey, const gnutls_datum_t *nonce, gnutls_datum_t *secret);
+typedef void (*gnutls_pk_deinit_func)(void *ctx);
+typedef int (*gnutls_pk_copy_func)(void **dst, void *src, gnutls_pk_algorithm_t algo);
+
 typedef int (*gnutls_digest_init_func)(gnutls_digest_algorithm_t, void **ctx);
 typedef int (*gnutls_digest_hash_func)(void *ctx, const void *text,
 				       size_t textsize);
@@ -299,6 +334,12 @@ int gnutls_encode_gost_rs_value(gnutls_datum_t *sig_value,
 int gnutls_decode_gost_rs_value(const gnutls_datum_t *sig_value,
 				gnutls_datum_t *r, gnutls_datum_t *s);
 
+typedef int (*gnutls_prf_raw_func)(gnutls_mac_algorithm_t mac,
+                                   size_t master_size, const void *master,
+                                   size_t label_size, const char *label,
+                                   size_t seed_size, const unsigned char *seed,
+                                   size_t outsize, char *out);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/libgnutls.map b/lib/libgnutls.map
index c236683..dce31be 100644
--- a/lib/libgnutls.map
+++ b/lib/libgnutls.map
@@ -1017,6 +1017,10 @@ GNUTLS_3_4
 	gnutls_crypto_register_aead_cipher;
 	gnutls_crypto_register_mac;
 	gnutls_crypto_register_digest;
+    gnutls_crypto_single_cipher_register;
+    gnutls_crypto_single_mac_register;
+    gnutls_crypto_single_digest_register;
+    gnutls_crypto_single_pk_register;
 	gnutls_ext_register;
 	gnutls_buffer_append_data;
 	gnutls_supplemental_register;
@@ -1446,6 +1450,7 @@ GNUTLS_3_8_6
  global:
 	gnutls_pkcs12_generate_mac3;
 	gnutls_hash_squeeze;
+	gnutls_prf_gen;
  local:
 	*;
 } GNUTLS_3_8_4;
diff --git a/lib/nettle/pk.c b/lib/nettle/pk.c
index 8e07586..28e94a9 100644
--- a/lib/nettle/pk.c
+++ b/lib/nettle/pk.c
@@ -4828,8 +4828,6 @@ static int wrap_nettle_pk_fixup(gnutls_pk_algorithm_t algo,
 	return 0;
 }
 
-int crypto_pk_prio = INT_MAX;
-
 gnutls_crypto_pk_st _gnutls_pk_ops = {
 	.encrypt = _wrap_nettle_pk_encrypt,
 	.decrypt = _wrap_nettle_pk_decrypt,
diff --git a/lib/nettle/prf.c b/lib/nettle/prf.c
index 317f91f..cc0b7fb 100644
--- a/lib/nettle/prf.c
+++ b/lib/nettle/prf.c
@@ -125,3 +125,10 @@ int _gnutls_prf_raw(gnutls_mac_algorithm_t mac, size_t master_size,
 
 	return 0;
 }
+
+int crypto_prf_prio = INT_MAX;
+
+gnutls_crypto_prf_st _gnutls_prf_ops = {
+    .raw = _gnutls_prf_raw,
+};
+
diff --git a/lib/prf.c b/lib/prf.c
index 95f2fef..3f7ad02 100644
--- a/lib/prf.c
+++ b/lib/prf.c
@@ -33,6 +33,17 @@
 #include "state.h"
 #include "algorithms.h"
 
+extern gnutls_crypto_prf_st _gnutls_prf_ops;
+
+int gnutls_prf_gen(gnutls_mac_algorithm_t mac, size_t master_size,
+                   const void *master, size_t label_size, const char *label,
+                   size_t seed_size, const uint8_t *seed, size_t outsize,
+                   char *out)
+{
+    return _gnutls_prf_ops.raw(mac, master_size, master, label_size, label,
+         seed_size, seed, outsize, out);
+}
+
 /**
  * gnutls_prf_raw:
  * @session: is a #gnutls_session_t type.
@@ -80,11 +91,11 @@ int gnutls_prf_raw(gnutls_session_t session, size_t label_size,
 	if (session->security_parameters.prf == NULL)
 		return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
 
-	ret = _gnutls_prf_raw(session->security_parameters.prf->id,
-			      GNUTLS_MASTER_SIZE,
-			      session->security_parameters.master_secret,
-			      label_size, label, seed_size, (uint8_t *)seed,
-			      outsize, out);
+	ret = gnutls_prf_gen(session->security_parameters.prf->id,
+			     GNUTLS_MASTER_SIZE,
+			     session->security_parameters.master_secret,
+			     label_size, label, seed_size, (uint8_t *)seed,
+			     outsize, out);
 
 	return ret;
 }
@@ -321,10 +332,10 @@ int gnutls_prf(gnutls_session_t session, size_t label_size, const char *label,
 		memcpy(seed + 2 * GNUTLS_RANDOM_SIZE, extra, extra_size);
 	}
 
-	ret = _gnutls_prf_raw(session->security_parameters.prf->id,
-			      GNUTLS_MASTER_SIZE,
-			      session->security_parameters.master_secret,
-			      label_size, label, seedsize, seed, outsize, out);
+	ret = gnutls_prf_gen(session->security_parameters.prf->id,
+			     GNUTLS_MASTER_SIZE,
+			     session->security_parameters.master_secret,
+			     label_size, label, seedsize, seed, outsize, out);
 
 	gnutls_free(seed);
 
diff --git a/lib/privkey.c b/lib/privkey.c
index 84e984f..d21c706 100644
--- a/lib/privkey.c
+++ b/lib/privkey.c
@@ -20,6 +20,10 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>
  */
 
+#include <config.h>
+#include <stdint.h>
+#include "crypto-backend.h"
+#include "crypto.h"
 #include "gnutls_int.h"
 #include <gnutls/pkcs11.h>
 #include <stdio.h>
@@ -480,6 +484,16 @@ int gnutls_privkey_init(gnutls_privkey_t *key)
  **/
 void gnutls_privkey_deinit(gnutls_privkey_t key)
 {
+    if (key == NULL)
+        return;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->deinit_backend != NULL) {
+        cc->deinit_backend(key->pk_ctx);
+        return;
+    }
+
 	if (key == NULL)
 		return;
 
@@ -961,6 +975,18 @@ int gnutls_privkey_import_x509(gnutls_privkey_t pkey, gnutls_x509_privkey_t key,
 			       unsigned int flags)
 {
 	int ret;
+	int result;
+
+	pkey->pk_algorithm = gnutls_x509_privkey_get_pk_algorithm(key);
+	const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(pkey->pk_algorithm);
+
+	if (cc != NULL && cc->copy_backend != NULL) {
+		result = cc->copy_backend(&pkey->pk_ctx, key->pk_ctx, key->params.algo);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		}
+	}
 
 	ret = check_if_clean(pkey);
 	if (ret < 0) {
@@ -1115,6 +1141,18 @@ int gnutls_privkey_generate2(gnutls_privkey_t pkey, gnutls_pk_algorithm_t algo,
 {
 	int ret;
 
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(algo);
+
+    if (cc != NULL && cc->generate_backend != NULL) {
+        pkey->pk_algorithm = algo;
+
+        if (cc->generate_backend(&pkey->pk_ctx, pkey, algo, bits) < 0) {
+                return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
+
 	ret = gnutls_x509_privkey_init(&pkey->key.x509);
 	if (ret < 0)
 		return gnutls_assert_val(ret);
@@ -1162,6 +1200,19 @@ int gnutls_privkey_sign_data(gnutls_privkey_t signer,
 {
 	int ret;
 	gnutls_x509_spki_st params;
+	int result;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(signer->pk_algorithm);
+
+    if (cc != NULL && cc->sign_backend != NULL) {
+        result = cc->sign_backend(signer->pk_ctx, &signer->key.x509->params.raw_priv, hash, data, signature);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
 
 	if (flags & GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA)
 		return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
@@ -1212,6 +1263,21 @@ int gnutls_privkey_sign_data2(gnutls_privkey_t signer,
 	int ret;
 	gnutls_x509_spki_st params;
 	const gnutls_sign_entry_st *se;
+	int result;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(signer->pk_algorithm);
+
+    if (cc != NULL && cc->sign_backend != NULL) {
+		se = _gnutls_sign_to_entry(algo);
+		gnutls_digest_algorithm_t hash = se->hash;
+        result = cc->sign_backend(signer->pk_ctx, &signer->key.x509->params.raw_priv, hash, data, signature);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
 
 	if (flags & GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA)
 		return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
@@ -1271,6 +1337,23 @@ int gnutls_privkey_sign_hash2(gnutls_privkey_t signer,
 	int ret;
 	gnutls_x509_spki_st params;
 	const gnutls_sign_entry_st *se;
+	int result;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(signer->pk_algorithm);
+
+	if (cc != NULL && cc->sign_hash_backend != NULL) {
+		se = _gnutls_sign_to_entry(algo);
+		gnutls_digest_algorithm_t hash = se->hash;
+		result = cc->sign_hash_backend(signer->pk_ctx, &signer->key.x509->params.raw_priv, hash, hash_data, signature);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+
+		return 0;
+	}
 
 	if (flags & GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA) {
 		/* the corresponding signature algorithm is SIGN_RSA_RAW,
@@ -1397,6 +1480,16 @@ int gnutls_privkey_sign_hash(gnutls_privkey_t signer,
 	gnutls_x509_spki_st params;
 	const gnutls_sign_entry_st *se;
 
+	const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(signer->pk_algorithm);
+
+	if (cc != NULL && cc->sign_hash_backend != NULL) {
+		if (cc->sign_hash_backend(signer->pk_ctx, signer, hash_algo, hash_data, signature) < 0) {
+			return gnutls_assert_val(-1);
+		}
+
+		return 0;
+	}
+
 	ret = _gnutls_privkey_get_spki_params(signer, &params);
 	if (ret < 0) {
 		gnutls_assert();
@@ -1587,6 +1680,16 @@ int gnutls_privkey_decrypt_data(gnutls_privkey_t key, unsigned int flags,
 				const gnutls_datum_t *ciphertext,
 				gnutls_datum_t *plaintext)
 {
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->privkey_decrypt_backend != NULL) {
+        if (cc->privkey_decrypt_backend(&key->pk_ctx, key, ciphertext, plaintext) < 0) {
+            return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
+
 	switch (key->type) {
 	case GNUTLS_PRIVKEY_X509:
 		return _gnutls_pk_decrypt(key->pk_algorithm, plaintext,
@@ -1766,6 +1869,15 @@ int gnutls_privkey_import_url(gnutls_privkey_t key, const char *url,
 {
 	unsigned i;
 	int ret;
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->import_privkey_url_backend != NULL) {
+        if (cc->import_privkey_url_backend(&key->pk_ctx, key, url) < 0) {
+            return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
 
 	for (i = 0; i < _gnutls_custom_urls_size; i++) {
 		if (strncmp(url, _gnutls_custom_urls[i].name,
@@ -2059,6 +2171,17 @@ int gnutls_privkey_derive_secret(gnutls_privkey_t privkey,
 				 const gnutls_datum_t *nonce,
 				 gnutls_datum_t *secret, unsigned int flags)
 {
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(privkey->pk_algorithm);
+
+    if (cc != NULL && cc->derive_shared_secret_backend != NULL) {
+        if (cc->derive_shared_secret_backend(privkey->pk_ctx, privkey, pubkey, nonce, secret) < 0) {
+            return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
+
 	if (unlikely(privkey == NULL || privkey->type != GNUTLS_PRIVKEY_X509)) {
 		return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
 	}
diff --git a/lib/pubkey.c b/lib/pubkey.c
index 811e531..66b4b58 100644
--- a/lib/pubkey.c
+++ b/lib/pubkey.c
@@ -19,6 +19,11 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>
  */
 
+
+#include <config.h>
+#include <stdint.h>
+#include "crypto-backend.h"
+#include "crypto.h"
 #include "gnutls_int.h"
 #include <gnutls/pkcs11.h>
 #include <stdio.h>
@@ -155,6 +160,12 @@ int gnutls_pubkey_init(gnutls_pubkey_t *key)
  **/
 void gnutls_pubkey_deinit(gnutls_pubkey_t key)
 {
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->deinit_backend != NULL) {
+        cc->deinit_backend(key->pk_ctx);
+        return;
+    }
 	if (!key)
 		return;
 	gnutls_pk_params_release(&key->params);
@@ -179,6 +190,20 @@ int gnutls_pubkey_import_x509(gnutls_pubkey_t key, gnutls_x509_crt_t crt,
 			      unsigned int flags)
 {
 	int ret;
+	int result;
+
+	key->pk_algorithm = GNUTLS_PK_UNKNOWN;
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->import_pubkey_x509_backend != NULL) {
+		result = cc->import_pubkey_x509_backend(&key->pk_ctx, key, &crt->der, flags);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
 
 	gnutls_pk_params_release(&key->params);
 	/* params initialized in _gnutls_x509_crt_get_mpis */
@@ -260,6 +285,20 @@ int gnutls_pubkey_import_x509_crq(gnutls_pubkey_t key, gnutls_x509_crq_t crq,
 int gnutls_pubkey_import_privkey(gnutls_pubkey_t key, gnutls_privkey_t pkey,
 				 unsigned int usage, unsigned int flags)
 {
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(pkey->pk_algorithm);
+	int result;
+
+    if (cc != NULL && cc->export_pubkey_backend != NULL) {
+        key->pk_algorithm = pkey->pk_algorithm;
+        result = cc->export_pubkey_backend(&key->pk_ctx, pkey->pk_ctx, key);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
+
 	gnutls_pk_params_release(&key->params);
 	gnutls_pk_params_init(&key->params);
 
@@ -1664,6 +1703,15 @@ int gnutls_pubkey_import_url(gnutls_pubkey_t key, const char *url,
 			     unsigned int flags)
 {
 	unsigned i;
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->import_pubkey_url_backend != NULL) {
+        if (cc->import_pubkey_url_backend(&key->pk_ctx, key, url) < 0) {
+            return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
 
 	for (i = 0; i < _gnutls_custom_urls_size; i++) {
 		if (strncmp(url, _gnutls_custom_urls[i].name,
@@ -2176,6 +2224,20 @@ int gnutls_pubkey_verify_data2(gnutls_pubkey_t pubkey,
 	const mac_entry_st *me;
 	gnutls_x509_spki_st params;
 	const gnutls_sign_entry_st *se;
+	int result;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(pubkey->pk_algorithm);
+
+    if (cc != NULL && cc->verify_backend != NULL) {
+		result = cc->verify_backend(pubkey->pk_ctx, &pubkey->params.raw_pub, algo, data, signature);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
+
 
 	if (pubkey == NULL) {
 		gnutls_assert();
@@ -2247,6 +2309,19 @@ int gnutls_pubkey_verify_hash2(gnutls_pubkey_t key,
 	gnutls_x509_spki_st params;
 	const gnutls_sign_entry_st *se;
 	int ret;
+	int result;
+
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->verify_hash_backend!= NULL) {
+		result = cc->verify_hash_backend(key->pk_ctx, key, algo, hash, signature);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
 
 	if (key == NULL) {
 		gnutls_assert();
@@ -2330,6 +2405,16 @@ int gnutls_pubkey_encrypt_data(gnutls_pubkey_t key, unsigned int flags,
 			       const gnutls_datum_t *plaintext,
 			       gnutls_datum_t *ciphertext)
 {
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->pubkey_encrypt_backend != NULL) {
+        if (cc->pubkey_encrypt_backend(&key->pk_ctx, key, plaintext, ciphertext) < 0) {
+            return gnutls_assert_val(-1);
+        }
+
+        return 0;
+    }
+
 	if (key == NULL) {
 		gnutls_assert();
 		return GNUTLS_E_INVALID_REQUEST;
diff --git a/lib/x509/privkey.c b/lib/x509/privkey.c
index 6c7bf13..0a1b5af 100644
--- a/lib/x509/privkey.c
+++ b/lib/x509/privkey.c
@@ -24,6 +24,7 @@
 
 #include "gnutls_int.h"
 #include "datum.h"
+#include "crypto-backend.h"
 #include "global.h"
 #include "errors.h"
 #include "tls-sig.h"
@@ -36,6 +37,7 @@
 #include "ecc.h"
 #include "pin.h"
 
+
 /**
  * gnutls_x509_privkey_init:
  * @key: A pointer to the type to be initialized
@@ -557,6 +559,19 @@ int gnutls_x509_privkey_import(gnutls_x509_privkey_t key,
 	int result = 0, need_free = 0;
 	gnutls_datum_t _data;
 
+	key->pk_algorithm = GNUTLS_PK_UNKNOWN;
+    const gnutls_crypto_pk_st *cc = _gnutls_get_crypto_pk(key->pk_algorithm);
+
+    if (cc != NULL && cc->import_privkey_x509_backend != NULL) {
+		result = cc->import_privkey_x509_backend(&key->pk_ctx, key, data, format);
+		if (result < 0 && result != GNUTLS_E_ALGO_NOT_SUPPORTED) {
+			gnutls_assert();
+			return result;
+		} else if (result == 0) {
+			return 0;
+		}
+    }
+
 	if (key == NULL) {
 		gnutls_assert();
 		return GNUTLS_E_INVALID_REQUEST;
diff --git a/lib/x509/x509_int.h b/lib/x509/x509_int.h
index 30f8051..a669d3d 100644
--- a/lib/x509/x509_int.h
+++ b/lib/x509/x509_int.h
@@ -140,6 +140,10 @@ struct pbkdf2_params {
 };
 
 typedef struct gnutls_x509_privkey_int {
+    void *pk_ctx;
+	gnutls_privkey_type_t type;
+	gnutls_pk_algorithm_t pk_algorithm;
+
 	/* the size of params depends on the public
 	 * key algorithm
 	 */
diff --git a/src/danetool.c b/src/danetool.c
index cb088a3..881b63d 100644
--- a/src/danetool.c
+++ b/src/danetool.c
@@ -599,7 +599,9 @@ static int cert_callback(gnutls_session_t session)
 			app_exit(1);
 		}
 
-		write(priv->fd, t.data, t.size);
+		if (write(priv->fd, t.data, t.size) != t.size) {
+			app_exit(1);
+                }
 		gnutls_free(t.data);
 	}
 	priv->found = 1;
diff --git a/tests/tls12-prf.c b/tests/tls12-prf.c
index da5adff..12d32fa 100644
--- a/tests/tls12-prf.c
+++ b/tests/tls12-prf.c
@@ -31,11 +31,6 @@
 #include <cmocka.h>
 #include "hex.h"
 
-int _gnutls_prf_raw(gnutls_mac_algorithm_t mac, size_t master_size,
-		    const void *master, size_t label_size, const char *label,
-		    size_t seed_size, const uint8_t *seed, size_t outsize,
-		    char *out);
-
 #define MATCH_FUNC(fname, mac, dsecret, dseed, dlabel, doutput)             \
 	static void fname(void **glob_state)                                \
 	{                                                                   \
@@ -45,10 +40,10 @@ int _gnutls_prf_raw(gnutls_mac_algorithm_t mac, size_t master_size,
 		gnutls_datum_t label = dlabel;                              \
 		gnutls_datum_t output = doutput;                            \
 		int _rval;                                                  \
-		_rval = _gnutls_prf_raw(mac, secret.size, secret.data,      \
-					label.size, (char *)label.data,     \
-					seed.size, seed.data, output.size,  \
-					tmp);                               \
+		_rval = gnutls_prf_gen(mac, secret.size, secret.data,       \
+				       label.size, (char *)label.data,      \
+				       seed.size, seed.data, output.size,   \
+				       tmp);                                \
 		assert_int_equal(_rval, 0);                                 \
 		assert_int_equal(memcmp(tmp, output.data, output.size), 0); \
 		gnutls_free(secret.data);                                   \
